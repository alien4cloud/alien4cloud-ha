#tosca_definitions_version: alien_dsl_1_1_0
tosca_definitions_version: tosca_simple_yaml_1_0_0_wd03

template_name: alien4cloud-ha
template_version: 1.0.0-SNAPSHOT
template_author: Fastconnect

imports:
#  - "tosca-normative-types:1.0.0-SNAPSHOT"
#  - "jdk-type:1.0.0-SNAPSHOT"
  - tosca-normative-types:*
#  - docker-provider-types:*
  - jdk-type:*

topology_template:

  inputs:
    rproxy_port:
      description: The reverse proxy will listen on this port.
      type: integer
      required: true
      default: 80
    alien_port:
      description: The A4C webapps will listen on this port.
      type: integer
      required: true
      default: 8088
    alien_data_dir:
      description: The location where A4C will store data on local FS.
      type: string
      required: true
      default: "/opt/alien4cloud/data"
    consul_tls_enabled:
      description: If true, TLS will be enabled on consul agents (HTTPS).
      type: boolean
      required: false
      default: true
    ssl_ca_passphrase:
      description: The passphrase for the CA certificate.
      type: string
      required: false
      default: "dontChangeIt"
    consul_gossip_encrypt_key:
      description: The key to encrypt gossip exchanges into consul cluster.
      type: string
      required: false
      default: "DicJJnc08ek/6pCxnQ/Rhg=="
  outputs:
    alien_url:
      description: The URL to access A4C.
      value: { get_attribute: [ ReverseProxy, service_url ] }
  node_templates:
    Network:
      type: tosca.nodes.Network
    ConsulServerCompute:
      type: tosca.nodes.Compute
      capabilities:
        scalable:
          properties:
            max_instances: 3
            min_instances: 3
            default_instances: 3
    ElasticSearchCompute:
      type: tosca.nodes.Compute
      capabilities:
        scalable:
          properties:
            max_instances: 2
            min_instances: 2
            default_instances: 2
    ReverseProxyCompute:
      type: tosca.nodes.Compute
      requirements:
        - network:
            node: Network
            capability: tosca.capabilities.Connectivity
            relationship: tosca.relationships.Network
    AlienCompute:
      type: tosca.nodes.Compute
      capabilities:
        scalable:
          properties:
            max_instances: 10
            min_instances: 2
            default_instances: 2
    SambaServerCompute:
      type: tosca.nodes.Compute
    ConsulServer:
      type: alien4cloud.consul.nodes.ConsulServer
      properties:
        tls_enabled: { get_input: consul_tls_enabled }
        ca_passphrase: { get_input: ssl_ca_passphrase }
        encrypt_key: { get_input: consul_gossip_encrypt_key }
      requirements:
        - host: ConsulServerCompute
    ReverseProxyConsulClient:
      type: alien4cloud.consul.nodes.ConsulClient
      properties:
        tls_enabled: { get_input: consul_tls_enabled }
        ca_passphrase: { get_input: ssl_ca_passphrase }
        encrypt_key: { get_input: consul_gossip_encrypt_key }
      requirements:
        - host: ReverseProxyCompute
        - consul_server: ConsulServer
    ReverseProxy:
      type: alien.ha.types.Nginx
      properties:
        listen_port: { get_input: rproxy_port }
      requirements:
        - host: ReverseProxyCompute
    ConsulTemplate:
      type: alien.ha.types.ConsulTemplate4Nginx
      properties:
        listen_port: { get_input: rproxy_port }
        tls_enabled: { get_input: consul_tls_enabled }
        ca_passphrase: { get_input: ssl_ca_passphrase }
      requirements:
        - host: ReverseProxyCompute
        - dependency:
            node: ReverseProxyConsulClient
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
        - dependency:
            node: ReverseProxy
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
    AlienJDK:
      type: alien.nodes.JDK
      requirements:
        - host: AlienCompute
    AlienConsulClient:
      type: alien4cloud.consul.nodes.ConsulClient
      properties:
        tls_enabled: { get_input: consul_tls_enabled }
        ca_passphrase: { get_input: ssl_ca_passphrase }
        encrypt_key: { get_input: consul_gossip_encrypt_key }
      requirements:
        - host: AlienCompute
        - consul_server: ConsulServer
    Alien:
      type: alien.nodes.Alien
      properties:
        alien_url: https://fastconnect.org/owncloud/public.php?service=files&t=59c0ae3b1a41c50677e8804fb0254f1f&download
        app_args: "--spring.profiles.active=security-demo,noApiDoc"
        alien_version: 1.3.0-SM2-SNAPSHOT
        listen_port: { get_input: alien_port }
        data_dir: { get_input: alien_data_dir }
      capabilities:
        consul:
          properties:
            tls_enabled: { get_input: consul_tls_enabled }
            ca_passphrase: { get_input: ssl_ca_passphrase }
            keystore_pwd: "k3ySt0r3Pwd"
            key_pwd: "k3yPwd"
            key_store_path: "/etc/alien4cloud/ssl/client-keystore.jks"
            trust_store_path: "/etc/alien4cloud/ssl/truststore.jks"
      requirements:
        - java:
            node: AlienJDK
            capability: alien.capabilities.JDK
            relationship: alien.relationships.JavaSoftwareHostedOnJDK
        - elasticsearch:
            node: ElasticSearch
            capability: alien.capabilities.ElasticSearch
            relationship: alien4cloud.relationships.ConnectToElasticSearch
        - consul:
            node: AlienConsulClient
            capability: alien4cloud.consul.capabilities.ConsulAgent
            relationship: alien4cloud.consul.relationships.ConnectToConsulAgent
        - dependency:
            node: SambaClient
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
    ElasticSearchJDK:
      type: alien.nodes.JDK
      requirements:
        - host: ElasticSearchCompute
    ElasticSearch:
      type: alien.nodes.ElasticSearch
      properties:
        cluster_name: "a4c_cluster"
      requirements:
        - java:
            node: ElasticSearchJDK
            capability: alien.capabilities.JDK
            relationship: alien.relationships.JavaSoftwareHostedOnJDK
    SambaServer:
      type: alien4cloud.samba.nodes.SambaServer
      requirements:
        - host: SambaServerCompute
    SambaClient:
      type: alien4cloud.samba.nodes.SambaClient
      requirements:
        - host: AlienCompute
        - smb_server:
            node: SambaServer
            capability: alien4cloud.samba.capabilities.SambaServer
            relationship: alien4cloud.samba.relationships.ConnectsToSambaServer
            properties:
              mount_point: { get_input: alien_data_dir }

node_types:

  alien4cloud.consul.nodes.ConsulAgent:
    abstract: true
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      Base Consul discovery service installation.
    tags:
      icon: /images/consul.png
    capabilities:
      consul_agent: alien4cloud.consul.capabilities.ConsulAgent
    properties:
      download_url:
        description: The URL to download the consul archive.
        type: string
        required: true
        default: https://releases.hashicorp.com/consul/0.6.4/consul_0.6.4_linux_amd64.zip
      data_dir:
        description: The location on the FS where consul will store data.
        type: string
        required: true
        default: /var/consul
      tls_enabled:
        description: Defines if the communication with the consul agent will be secured (HTTPS).
        type: boolean
        required: true
        default: false
      ca_passphrase:
        description: The provided CA certificate passphrase.
        type: string
        required: false
      encrypt_key:
        description: The key to encrypt gossip exchanges into consul cluster.
        type: string
        required: false
    attributes:
      consul_client_address: { get_operation_output: [ SELF, Standard, start, CONSUL_CLIENT_ADDRESS ] }
      consul_server_address: { get_operation_output: [ SELF, Standard, start, CONSUL_SERVER_ADDRESS ] }

  alien4cloud.consul.nodes.ConsulServer:
    derived_from: alien4cloud.consul.nodes.ConsulAgent
    description: >
      Consul discovery service installation (server node).
    properties:
      agent_mode:
        description: Indicate the consul agent mode (actually server).
        type: string
        constraints:
          - equal: server
        required: true
        default: server
    capabilities:
      consul_server: alien4cloud.consul.capabilities.ConsulServer
    interfaces:
      Standard:
        create:
          inputs:
            CONSUL_DATA_DIR: { get_property: [SELF, data_dir] }
            CONSUL_DOWNLOAD_URL: { get_property: [SELF, download_url] }
          implementation: scripts/consul/create_consul.sh
        configure:
          inputs:
            CONSUL_AGENT_MODE: { get_property: [SELF, agent_mode] }
            CONSUL_DATA_DIR: { get_property: [SELF, data_dir] }
            CONSUL_BIND_ADDRESS: { get_attribute: [HOST, ip_address] }
            TLS_ENABLED: { get_property: [SELF, tls_enabled] }
            CA_PASSPHRASE: { get_property: [SELF, ca_passphrase] }
            ENCRYPT_KEY: { get_property: [SELF, encrypt_key] }
          implementation: scripts/consul/start_consul_agent.sh
        start:
          inputs:
            CONSUL_ADDRESS: { get_attribute: [HOST, ip_address] }
          implementation: scripts/consul/join_consul_servers.sh
    artifacts:
      - configs: config/consul
        type: tosca.artifacts.File
      - ssl: ssl
        type: tosca.artifacts.File

  alien4cloud.consul.nodes.ConsulClient:
    derived_from: alien4cloud.consul.nodes.ConsulAgent
    description: >
      Consul discovery service installation (client node).
    properties:
      agent_mode:
        description: Indicate the consul agent mode (actually client).
        type: string
        constraints:
          - equal: client
        default: client
    requirements:
      - consul_server: alien4cloud.consul.capabilities.ConsulServer
        type: alien4cloud.consul.relationships.JoinCluster
    interfaces:
      Standard:
        create:
          inputs:
            CONSUL_DATA_DIR: { get_property: [SELF, data_dir] }
            CONSUL_DOWNLOAD_URL: { get_property: [SELF, download_url] }
          implementation: scripts/consul/create_consul.sh
        start:
          inputs:
            CONSUL_AGENT_MODE: { get_property: [SELF, agent_mode] }
            CONSUL_DATA_DIR: { get_property: [SELF, data_dir] }
            CONSUL_BIND_ADDRESS: { get_attribute: [HOST, ip_address] }
            TLS_ENABLED: { get_property: [SELF, tls_enabled] }
            CA_PASSPHRASE: { get_property: [SELF, ca_passphrase] }
            ENCRYPT_KEY: { get_property: [SELF, encrypt_key] }
          implementation: scripts/consul/start_consul_agent.sh
    artifacts:
      - configs: config/consul
        type: tosca.artifacts.File
      - ssl: ssl
        type: tosca.artifacts.File

  alien.nodes.ElasticSearch:
    derived_from: alien.nodes.JavaSoftware
    description: >
      Installation of replicated ElasticSearch (if this node is scaled, will be replicated). 
    tags:
      icon: images/elasticsearch.png
    properties:
      elasticsearch_url:
        type: string
        required: true
        default: "https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.7.0.deb"
      listen_port:
        type: integer
        required: true
        default: 9300
      cluster_name:
        description: The name of the ElasticSearch cluster.
        type: string
        required: true
        default: "escluster"
    capabilities:
      elasticsearch:
        type: alien.capabilities.ElasticSearch
        upper_bound: unbounded
    interfaces:
      Standard:
        create:
          inputs:
            APPLICATION_URL: { get_property: [SELF, elasticsearch_url] }
          implementation: scripts/elasticsearch/install_elasticsearch.sh
        configure:
          inputs:
            ES_IP: { get_attribute: [HOST, ip_address] }
            CLUSTER_NAME: { get_property: [SELF, cluster_name] }
          implementation: scripts/elasticsearch/configure_elasticsearch.sh
        start:
          implementation: scripts/elasticsearch/start_elasticsearch.sh
    artifacts:
      - configs: config/elasticsearch
        type: tosca.artifacts.File

  alien.nodes.Alien:
    derived_from: alien.nodes.JavaSoftware
    description: >
      The TOSCA Alien Node Type represents an alien webapp.
    tags:
      icon: /images/alien4cloud-logo.png
    properties:
      alien_url:
        description: The URL where to download A4C archive.
        type: string
        required: true
        default: "https://fastconnect.org/maven/service/local/repositories/opensource/content/alien4cloud/alien4cloud-ui/1.1.0-SM8/alien4cloud-ui-1.1.0-SM8-standalone.war"
      context_root:
        type: string
        default: "/"
      app_args:
        description: These args will be used as java program arguments.
        type: string
        required: false
        default: ""
      listen_port:
        description: The port on which A4C will listen.
        type: integer
        required: true
        default: 8080
      alien_version:
        description: The version of A4C (important in create stage).
        type: string
        required: true
      data_dir:
        description: The location on the file system where A4C will store data (plugins, images ...).
        type: string
        required: true
        default: "/opt/alien4coud/data"
    capabilities:
      consul:
        type: alien4cloud.consul.capabilities.ConsulClient
      elasticsearch:
        type: alien.capabilities.ElasticSearchClient
    requirements:
      - elasticsearch: alien.capabilities.ElasticSearch
        type: alien4cloud.relationships.ConnectToElasticSearch
        lower_bound: 1
        upper_bound: 1
      - consul: alien4cloud.consul.capabilities.ConsulAgent
        type: alien4cloud.consul.relationships.ConnectToConsulAgent
        lower_bound: 0
        upper_bound: 1
    interfaces:
      Standard:
        create:
          inputs:
            APPLICATION_URL: { get_property: [SELF, alien_url] }
            APP_ARGS: { get_property: [SELF, app_args] }
            ALIEN_VERSION: { get_property: [SELF, alien_version] }
            DATA_DIR: { get_property: [SELF, data_dir] }
          implementation: scripts/alien/install_alien.sh
        configure:
          inputs:
            ALIEN_IP: { get_attribute: [HOST, ip_address] }
            ALIEN_PORT: { get_property: [SELF, listen_port] }
            DATA_DIR: { get_property: [SELF, data_dir] }
            TLS_ENABLED: { get_property: [SELF, consul, tls_enabled] }
            KEY_STORE_PATH: { get_property: [SELF, consul, key_store_path] }
            TRUST_STORE_PATH: { get_property: [SELF, consul, trust_store_path] }
            KEYSTORE_PWD: { get_property: [SELF, consul, keystore_pwd] }
          implementation: scripts/alien/config_alien.sh
        start:
          inputs:
            ALIEN_IP: { get_attribute: [HOST, ip_address] }
            ALIEN_PORT: { get_property: [SELF, listen_port] }
          implementation: scripts/alien/start_alien.sh
    artifacts:
      - bin: bin
        type: tosca.artifacts.File

  alien.ha.types.Nginx:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      NGINX web server and reverse proxy installation.
    tags:
      icon: /images/nginx.png
    properties:
      listen_port:
        description: The port onto the http server will be listening.
        type: integer
        required: true
        default: 80
    attributes:
      service_url: { concat: ["http://", get_attribute: [HOST, public_ip_address], ":", get_property: [SELF, listen_port]] }
    interfaces:
      Standard:
        create:
          implementation: scripts/nginx/create.sh
        configure:
          inputs:
            LISTEN_PORT: { get_property: [SELF, listen_port] }
            SERVER_NAME: { get_attribute: [HOST, public_ip_address] }
          implementation: scripts/nginx/configure.sh
        start:
          implementation: scripts/nginx/start.sh
    artifacts:
      - config: config/nginx
        type: tosca.artifacts.File

  alien.ha.types.ConsulTemplate4Nginx:
    derived_from: tosca.nodes.SoftwareComponent
    description: |
      Consul-Template is a smart tool that can listen for consul changes, 
      use templates to update config files on changes, and call a command. It can be
      used for example to update reverse proxy config and reload it.
    tags:
      icon: /images/consul_template.png
    properties:
      download_url:
        type: string
        required: true
        default: "https://releases.hashicorp.com/consul-template/0.15.0/consul-template_0.15.0_linux_amd64.zip"
      listen_port:
        type: integer
        required: true
        default: 8080
      tls_enabled:
        description: define if the agent will be secured
        type: boolean
        required: true
        default: false
      ca_passphrase:
        description: the provided CA cert passphrase
        type: string
        required: false

    interfaces:
      Standard:
        create:
          inputs:
            APPLICATION_URL: { get_property: [SELF, download_url] }
          implementation: scripts/consul_template/create.sh
        configure:
          inputs:
            LISTEN_PORT: { get_property: [SELF, listen_port] }
            SERVER_NAME: { get_attribute: [HOST, public_ip_address] }
            TLS_ENABLED: { get_property: [SELF, tls_enabled] }
            CA_PASSPHRASE: { get_property: [SELF, ca_passphrase] }
          implementation: scripts/consul_template/configure.sh
        start:
          implementation: scripts/consul_template/start.sh
    artifacts:
      - config: config/consul_template
        type: tosca.artifacts.File
      - ssl: ssl
        type: tosca.artifacts.File

  alien4cloud.samba.nodes.SambaServer:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      Configure a samba server
    tags:
      icon: /images/samba.png
    properties:
      share_name:
        type: string
        default: "ALIEN4CLOUD"
      share_path:
        type: string
        default: "/srv/samba/alien4cloud"
    capabilities:
      smb_server: alien4cloud.samba.capabilities.SambaServer
    interfaces:
      Standard:
        create: scripts/smbServer/install.sh
        configure:
          inputs:
            SHARE_NAME: { get_property: [SELF, share_name] }
            SHARE_PATH: { get_property: [SELF, share_path] }
          implementation: scripts/smbServer/configure.sh
        start: scripts/smbServer/start.sh
        stop: scripts/smbServer/stop.sh
    artifacts:
      - config: config/samba/smb.conf
        type: tosca.artifacts.File

  alien4cloud.samba.nodes.SambaClient:
    derived_from: tosca.nodes.SoftwareComponent
    description: >
      Configure a samba client
    tags:
      icon: /images/samba.png
    properties:
      mount_point:
        type: string
        default: "/var/alien4cloud"
    requirements:
      - smb_server: alien4cloud.samba.capabilities.SambaServer
        type: alien4cloud.samba.relationships.ConnectsToSambaServer
    interfaces:
      Standard:
        create: scripts/smbClient/install.sh

capability_types:

  alien4cloud.consul.capabilities.ConsulAgent:
    derived_from: tosca.capabilities.Root
    description: >
      A consul agent (server or client) exposes this capability.
  alien4cloud.consul.capabilities.ConsulClient:
    derived_from: tosca.capabilities.Root
    description: >
      The capability to connect to a consul agent using the consul API.
    properties:
      tls_enabled:
        type: boolean
        description: indicates if the connection will be secured (HTTPS)
        required: false
        default: false
      ca_passphrase:
        type: string
        description: the passphrase for the CA certificate
        required: false
      key_store_path:
        type: string
        description: the location of the key store
        required: false
      trust_store_path:
        type: string
        description: the location of the trust store
        required: false
      keystore_pwd:
        type: string
        description: the password for the key store
        required: false
      key_pwd:
        type: string
        description: the password for the key
        required: false
  alien4cloud.consul.capabilities.ConsulServer:
    derived_from: tosca.capabilities.Root
    description: >
      Exposed by a consul server agent.
  alien.capabilities.ElasticSearch:
    derived_from: tosca.capabilities.Root
    description: >
      Exposed by a ElasticSearch node.
  alien.capabilities.ElasticSearchClient:
    derived_from: tosca.capabilities.Root
    description: >
      The capability to connect to a ElasticSearch cluster.
  alien4cloud.samba.capabilities.SambaServer:
    derived_from: tosca.capabilities.Root

relationship_types:

  alien4cloud.consul.relationships.JoinCluster:
    derived_from: tosca.relationships.ConnectsTo
    description: >
      The relationship between a consul client agent and a consul server agent.
    valid_target_types: [alien4cloud.consul.capabilities.ConsulServer]
    valid_source_types: [alien4cloud.consul.capabilities.ConsulClient]
    interfaces:
      Configure:
        add_target:
          inputs:
            CONSUL_SERVER_ADDRESS: { get_attribute: [TARGET, ip_address] }
          implementation: scripts/consul/join_consul_cluster.sh
  alien4cloud.consul.relationships.ConnectToConsulAgent:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [alien4cloud.consul.capabilities.ConsulAgent]
    valid_source_types: [alien4cloud.consul.capabilities.ConsulClient]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            # the capabity name is required here, but in fact I can't guess it
            # TOSCA limitation ?
            TLS_ENABLED: { get_property: [SOURCE, consul, tls_enabled] }
            CA_PASSPHRASE: { get_property: [SOURCE, consul, ca_passphrase] }
            KEY_STORE_PATH: { get_property: [SOURCE, consul, key_store_path] }
            TRUST_STORE_PATH: { get_property: [SOURCE, consul, trust_store_path] }
            KEYSTORE_PWD: { get_property: [SOURCE, consul, keystore_pwd] }
            KEY_PWD: { get_property: [SOURCE, consul, key_pwd] }
          implementation: scripts/ConnectToConsulAgent/pre_configure_source.sh
    artifacts:
      - ssl: ssl
        type: tosca.artifacts.File
  alien4cloud.relationships.ConnectToElasticSearch:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [alien.capabilities.ElasticSearch]
    valid_source_types: [alien.capabilities.ElasticSearchClient]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            ES_IP: { get_attribute: [TARGET, ip_address] }
            ES_PORT: { get_property: [TARGET, listen_port] }
            CLUSTER_NAME: { get_property: [TARGET, cluster_name] }
          implementation: scripts/elasticsearch/ConnectToElasticSearch/pre_configure_source.sh
  alien4cloud.samba.relationships.ConnectsToSambaServer:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [alien4cloud.samba.capabilities.SambaServer]
    properties:
      mount_point:
        type: string
        default: "/var/alien4cloud"
    interfaces:
      Configure:
        add_target:
          inputs:
            SAMBA_SERVER_IP: { get_attribute: [TARGET, ip_address] }
            SHARE_NAME: { get_property: [TARGET, share_name] }
            MOUNT_POINT: { get_property: [SELF, mount_point] }
          implementation: scripts/smbClient/add_target.sh
        remove_target:
          inputs:
            MOUNT_POINT: { get_property: [SELF, mount_point] }
          implementation: scripts/smbClient/remove_target.sh
